var createScene = function() {
var scene = new BABYLON.Scene(engine, true);
var camera2 = new BABYLON.ArcRotateCamera("camera2", Math.PI / 2, Math.PI / 2, 10, BABYLON.Vector3.Zero(), scene);

// This attaches the camera to the canvas
camera2.attachControl(canvas, true);
camera2.wheelPrecision = 20;

// This creates a light, aiming 0,1,0 - to the sky (non-mesh)
var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);

// Default intensity is 1. Let's dim the light a small amount
light.intensity = 0.7;

// Our built-in 'sphere' shape. Params: name, subdivs, size, scene
var sphere = BABYLON.Mesh.CreateSphere("sphere1", 16, 0.5, scene);
sphere.position.y = 1;
  //Creation of a material with an image texture
var materialSphere3 = new BABYLON.StandardMaterial("texture3", scene);
materialSphere3.diffuseTexture = new BABYLON.Texture("https://thumbs.dreamstime.com/z/hexagons-black-stone-green-hot-streaks-energy-seamless-vector-texture-technology-seamless-pattern-geometric-72366301.jpg", scene);
sphere.material = materialSphere3;

BABYLON.Effect.ShadersStore["customVertexShader"] = `
precision highp float;  
attribute vec3 position; 
attribute vec3 normal; 
attribute vec2 uv;  
uniform mat4 worldViewProjection; 
uniform float time;  
varying vec3 vPosition; 
varying vec3 vNormal; 
varying vec2 vUV;  
void main(void) {
    vec3 v = position;     
    gl_Position = worldViewProjection * vec4(v, 1.0);     
    vPosition = position;     
    vNormal = normal;     
    vUV = uv; 
}`;

BABYLON.Effect.ShadersStore["customFragmentShader"] = `
#extension GL_OES_standard_derivatives : enable
precision highp float;   
        	
// Varying
varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUV;

// Refs
uniform vec3 color;
uniform vec3 cameraPosition;
        	
 
void main(void) {
    vec2 uv=-1.+2.*vUV;
    float a=  1.-smoothstep(-.9,0.9,abs(uv.x));//*(1.-vUV.y))*1.);
    float b=1.-pow(0.1,vUV.y);
    vec3 col=vec3(0.,b*8.,0.);
    gl_FragColor = vec4(col,a);
}`;

var laserMaterial = new BABYLON.ShaderMaterial("shader", scene, {
    vertex: "custom",
    fragment: "custom",
},
    {
        needAlphaBlending: true,
        attributes: ["position", "normal", "uv"],
        uniforms: [  "time","worldViewProjection"]
    });


var laserlen = 10;
var plane = BABYLON.MeshBuilder.CreatePlane("pl", { width: .2, height: laserlen }, scene);
var plane2 = BABYLON.MeshBuilder.CreatePlane("pl", { width: .2, height: laserlen }, scene);
var cyl = BABYLON.MeshBuilder.CreateCylinder("cyl", {diameter: 0.1, height: laserlen}, scene);
plane2.rotation.y = Math.PI / 2;
var matrix = BABYLON.Matrix.Translation(0, laserlen/2, 0);
plane.setPivotMatrix(matrix);
plane2.setPivotMatrix(matrix);
cyl.setPivotMatrix(matrix);
plane.parent = sphere;
plane2.parent = sphere;
cyl.parent = sphere;
sphere.rotation.x = Math.PI / 2;

laserMaterial.setColor3('color', new BABYLON.Color3(0, 1, 0));
laserMaterial.setVector3('cameraPosition', BABYLON.Vector3.Zero());
laserMaterial.setFloat('time', 0.0);
laserMaterial.alphaMode = BABYLON.Engine.ALPHA_ADD;
laserMaterial.alpha = 0.99999;
laserMaterial.backFaceCulling = false;

plane.material = laserMaterial;
plane2.material = laserMaterial;
cyl.material = laserMaterial;

var k = 0;
scene.registerBeforeRender(function () {
    laserMaterial.setVector3('cameraPosition', camera2.position);
    //sphere.rotation.z = Math.sin(k);
    k += 2.1;
});

engine.runRenderLoop(function () {
    //this.scene.render();
	//sphere.rotation.y += 0.004;
    
 });

	return scene;
};